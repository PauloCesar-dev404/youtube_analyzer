# Simple workflow for deploying static content to GitHub Pages
name: Deploy static content to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  deploy:
    name: Deploy to GitHub Pages
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Cache the dependencies to speed up subsequent runs (optional)
      - name: Setup cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-

      # Install dependencies if necessary (useful for static site generators like Jekyll, Hugo, etc.)
      - name: Install dependencies
        run: |
          if [ -f package.json ]; then
            npm ci
          fi

      # Build static content (optional, add only if using a static site generator)
      - name: Build static site
        run: |
          if [ -f package.json ]; then
            npm run build
          fi

      - name: Setup GitHub Pages
        uses: actions/configure-pages@v5

      - name: Upload static content from docs folder
        uses: actions/upload-pages-artifact@v3
        with:
          path: './docs' # Usar a pasta 'docs' como fonte de conteúdo estático

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      # Optional: Send a Slack/Discord/Webhook notification after deployment
      - name: Send notification
        if: success()
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"Deployment successful!"}' ${{ secrets.WEBHOOK_URL }}
